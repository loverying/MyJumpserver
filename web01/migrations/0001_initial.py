# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-11-07 08:23
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('telephone', models.CharField(max_length=11, null=True, unique=True)),
                ('avatar', models.FileField(default='/avatars/default.png', upload_to='avatars/')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='command_log',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('command', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_name', models.CharField(max_length=64, unique=True)),
                ('in_ip', models.GenericIPAddressField(unique=True)),
                ('out_ip', models.GenericIPAddressField(unique=True)),
                ('port', models.SmallIntegerField(default=22)),
                ('host_user', models.CharField(max_length=32)),
                ('password', models.CharField(max_length=32)),
                ('key', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Host_group',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('group_name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('idc', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Mypage',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=64, verbose_name='个人首页')),
            ],
        ),
        migrations.AddField(
            model_name='host',
            name='Host_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web01.Host_group'),
        ),
        migrations.AddField(
            model_name='host',
            name='idc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web01.IDC'),
        ),
        migrations.AddField(
            model_name='host',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='command_log',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web01.Host'),
        ),
        migrations.AddField(
            model_name='command_log',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='mypage',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='web01.Mypage'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
